name: Create and publish a Docker image

# Configures this workflow to run every time new release is published
on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
      - 'v*.*.*\+*'

# Defines two custom environment variables for the workflow.
# These are used for the Container registry domain,
# and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ODOOD_DLANG_COMPILER: ldc-1.39.0

# There is a single job in this workflow.
# It's configured to run on the latest available version of Ubuntu.
jobs:
  build-ubuntu-20_04:
    name: Build Ubuntu:20.04
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ env.ODOOD_DLANG_COMPILER }}

      - name: Install system dependencies
        uses: lyricwulf/abc@v1
        with:
          linux: libzip-dev libpq-dev python3-dev

      - name: Build Odood
        run: |
          dub build -b release --d-version OdoodInDocker
          
      - name: Upload Odood compiled assets
        uses: actions/upload-artifact@v3
        with:
          name: odood-amd64
          path: |
            build/odood
            
  build-and-push-images:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    needs:
      - build-ubuntu-20_04
    strategy:
      matrix:
        # TODO: Build base image (without Odoo, only with odood itself) and then use it as base for odoo images
        odoo_version:
          - "15.0"
          - "16.0"
          - "17.0"
          - "18.0"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 'Download artifacts for amd64'
        uses: actions/download-artifact@v3
        with:
          name: odood-amd64
          path: docker/bin/

      - name: Make odood executable
        run: |
          chmod a+x docker/bin/odood

      # Uses the `docker/login-action` action to log in to the Container registry
      # using the account and password that will publish the packages.
      # Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about)
      # to extract tags and labels that will be applied to the specified image.
      # The `id` "meta" allows the output of this step to be referenced in a subsequent step.
      # The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/odoo/${{ matrix.odoo_version }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Prepare debian dependencies dependencies
        id: prepare_deb_deps
        run: |
          echo "universal_deb_deps=$(cat .ci/deps/universal-deb.txt | tr '\n' ' ')" >> $GITHUB_OUTPUT
          
      # This step uses the `docker/build-push-action` action to build the image,
      # based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path.
      # For more information, see "[Usage](https://github.com/docker/build-push-action#usage)"
      # in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./docker
          push: true
          build-args: |
            ODOO_VERSION=${{ matrix.odoo_version }}
            ODOOD_DEPENDENCIES=${{ steps.prepare_deb_deps.outputs.universal_deb_deps }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            odoo_version=${{ matrix.odoo_version }}
      
      # This step generates an artifact attestation for the image,
      # which is an unforgeable statement about where and how it was built.
      # It increases supply chain security for people who consume the image.
      # For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}/odoo/${{ matrix.odoo_version }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      
