
# Workflow to test Odoo deployments on various OS
name: Tests OS deployments
on:
  push:
    branches:
      - '*'
env:
  ODOOD_DLANG_COMPILER: ldc-1.40.1

# TODO: Test for arm architecture

# In this test, we build Odood on Ubuntu 22.04 and then try to run
# produced binary on different distros and versions
jobs:
  # Compile test builds on ubuntu 22.04
  compile-ubuntu:
    name: Build Ubuntu
    strategy:
      matrix:
        os:
          - ubuntu-22.04
          - ubuntu-22.04-arm
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Check arch
        id: check-arch
        run: |
          echo "arch=$(uname -m)" >> $GITHUB_OUTPUT

      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ env.ODOOD_DLANG_COMPILER }}

      - name: Install system dependencies
        uses: lyricwulf/abc@v1
        with:
          linux: libzip-dev libpq-dev python3-dev

      - name: Build Odood
        run: |
          dub build -b unittest-cov
          .ci/print_deps.d > build/deb-dependencies.txt

      - name: Upload Odood compiled assets
        uses: actions/upload-artifact@v4
        with:
          name: odood-ubuntu-${{ steps.check-arch.outputs.arch }}
          path: |
            build/odood
            build/deb-dependencies.txt


  # Run integration tests for different operation systems (external database)
  run-deployment-tests:
    name: Run deployment tests
    strategy:
      fail-fast: false
      matrix:
        image:
          - "debian:bookworm"
          - "ubuntu:22.04"
          - "ubuntu:24.04"
        odoo_version:
          - "18.0"
          - "17.0"
          - "16.0"
        os:
          - ubuntu-22.04
          - ubuntu-22.04-arm
    runs-on: ${{ matrix.os }}
    needs:
      - compile-ubuntu
    container:
      image: ${{ matrix.image }}
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: odoo
          POSTGRES_USER: odoo
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DEBIAN_FRONTEND: 'noninteractive'
    steps:
      - uses: actions/checkout@v3

      - name: Check arch
        id: check-arch
        run: |
          echo "arch=$(uname -m)" >> $GITHUB_OUTPUT

      - name: 'Download artifacts'
        uses: actions/download-artifact@v4
        with:
          name: odood-ubuntu-${{ steps.check-arch.outputs.arch }}
          path: build

      - name: Update apt registry
        run: apt-get update

      - name: Install system dependencies
        run: apt-get install --no-install-recommends -yq sudo logrotate

      - name: Install package dependencies
        run: apt-get install --no-install-recommends -yq $(cat build/deb-dependencies.txt)

      - name: Make test build executable
        run: chmod a+x ./build/odood

      - name: Deploy with init-script
        run: ./build/odood -v -d deploy -v ${{ matrix.odoo_version }} --supervisor=init-script --db-host=postgres --db-user=odoo --db-password=odoo

      - name: Minimal test for deployed version
        run: |
          ./build/odood -v -d db create -r  --demo odood-test-db
          ./build/odood -v -d db list
          ./build/odood -v -d addons install --db odood-test-db crm
          ./build/odood -v -d db backup --dest /tmp/odood-db.zip odood-test-db
          ./build/odood -v -d addons update --db odood-test-db crm
          ./build/odood -v -d db drop odood-test-db
          ./build/odood -v -d db restore -r odood-test-db  /tmp/odood-db.zip
          ./build/odood -v -d addons uninstall --db odood-test-db crm
          ./build/odood -v -d db drop odood-test-db


      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v3
        with:
          flags: deployment-tests-${{ matrix.image }}-${{ matrix.odoo_version }}
          name: odood-deployment-tests-${{ matrix.image }}-${{ matrix.odoo_version }}

  run-deployment-tests-with-local-postgres:
    name: Run deployment tests (local postgres)
    strategy:
      fail-fast: false
      matrix:
        image:
          - "debian:bookworm"
          - "ubuntu:22.04"
          - "ubuntu:24.04"
        odoo_version:
          - "18.0"
          - "17.0"
          - "16.0"
        os:
          - ubuntu-22.04
          - ubuntu-22.04-arm
    runs-on: ${{ matrix.os }}
    needs:
      - compile-ubuntu
    container:
      image: ${{ matrix.image }}
    env:
      DEBIAN_FRONTEND: 'noninteractive'
    steps:
      - uses: actions/checkout@v3

      - name: Check arch
        id: check-arch
        run: |
          echo "arch=$(uname -m)" >> $GITHUB_OUTPUT

      - name: 'Download artifacts'
        uses: actions/download-artifact@v4
        with:
          name: odood-ubuntu-${{ steps.check-arch.outputs.arch }}
          path: build

      - name: Update apt registry
        run: apt-get update

      - name: Install system dependencies
        run: apt-get install --no-install-recommends -yq sudo logrotate postgresql

      - name: Install package dependencies
        run: apt-get install --no-install-recommends -yq $(cat build/deb-dependencies.txt)

      - name: Start postgresql service
        run: |
          service postgresql start
          echo 'Check PostgreSQL service is running'
          i=10
          while [ $i -gt 0 ]; do
              echo 'Check PostgreSQL service status'
              pg_isready && break
              ((i--))
              if [ $i == 0 ]; then
                  echo 'PostgreSQL service not ready, all attempts exhausted'
                  exit 1
              fi
              echo 'PostgreSQL service not ready, wait 5 more sec, attempts left: $i'
              sleep 5
          done

      - name: Make test build executable
        run: chmod a+x ./build/odood

      - name: Deploy with init-script
        run: ./build/odood -v -d deploy -v ${{ matrix.odoo_version }} --supervisor=init-script --local-postgres

      - name: Minimal test for deployed version
        run: |
          ./build/odood -v -d db create -r  --demo odood-test-db
          ./build/odood -v -d db list
          ./build/odood -v -d addons install --db odood-test-db crm
          ./build/odood -v -d db backup --dest /tmp/odood-db.zip odood-test-db
          ./build/odood -v -d addons update --db odood-test-db crm
          ./build/odood -v -d db drop odood-test-db
          ./build/odood -v -d db restore -r odood-test-db  /tmp/odood-db.zip
          ./build/odood -v -d addons uninstall --db odood-test-db crm
          ./build/odood -v -d db drop odood-test-db

      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v3
        with:
          flags: deployment-tests-${{ matrix.image }}-${{ matrix.odoo_version }}
          name: odood-deployment-tests-${{ matrix.image }}-${{ matrix.odoo_version }}
